#!/bin/bash

# Checking the correct number of arguments
ile_arg=`expr $# % 2` 


if [ $ile_arg -eq 0 ]
then
	printf "Invalid number of arguments \ nThe correct invocation should be 'calculator arg op arg op arg ...'\n"
	exit 2
fi

	# Power function

pow ()
{
	echo $zj
	echo $zd
	if [[ $zj =~ ^[-]?[0-9]+$ ]] 
	then
		if [[ $zd =~ ^[0-9]+$ ]]
		then	
			pods=0
			for (( i=1, pods=zj ; i<zd; i++ ));
			do
				(( pods *= zj ));
			done
		else printf "The exponent of the power must be a positive integer\n"
			exit 2
		fi
	else printf "Only an integer can be the basis of a power\n"
		exit 2
	fi
}

	#Division by 0 function

divi_err()
{
	if [[ $k =~ ^[/]$ ]] && [[ $z -eq 0 ]]
	then
		printf "Divide by zero error\n"
		exit 2
	fi
}

results()                    # variable test function
{
echo "Result :"$result
echo "1 :" $1
echo "2 :" $2
echo "3 :" $3
echo "4 :" $4
echo "5 :" $5
echo "6 :" $6
echo "7 :" $7
echo "8 :" $8
echo "9 :" $9
echo "Result :"$result
}

# Check that the correct operators are given
result=0

while [ $# -gt 0 ]
do
	if [[ $1 =~ ^[-]?[0-9]+$ ]]
	then
		if [[ $2 =~ ^[-+]$ ]] && [[ $4 =~ ^[*/]$ ]] && [[ $6 =~ ^[\\^]$ ]]
		then
			if [[ $3 =~ ^[-]?[0-9]+$ ]] && [[ $1 =~ ^[-]?[0-9]+$ ]]
			then
				if [[ $4 =~ ^[*]$ ]]
				then 
					zj=$5
					zd=$7
					pow
					result=`expr $1 $2 $3 \* $pods`
					shift 7
				else
					zj=$5
					zd=$7
					pow
					result=`expr $1 $2 $3 $4 $pods`
					shift 7
				fi
			else printf "Invalid number: $2 or $1 Please enter only integers, can be negative"
				exit 2
		fi
		elif [[ $2 =~ ^[-+*/]$ ]] && [[ $4 =~ ^[\\^]$ ]]
		then
			if [[ $2 =~ ^[*]$ ]]
				then
				zj=$3
				zd=$5
				pow
				result=`expr $1 \* $pods`
				shift 5
			else
				zj=$3
				zd=$5
				pow
				result=`expr $1 $2 $pods`
				shift 5
			fi
		elif [[ $2 =~ ^[-+]$ ]] && [[ $4 =~ ^[*/]$ ]]
		then
			if [[ $1 =~ ^[-]?[0-9]+$ ]] && [[ $3 =~ ^[-]?[0-9]+$ ]] && [[ $5 =~ ^[-]?[0-9]+$ ]]
			then
				if [[ $4 =~ ^[*]$ ]]
				then
					k=$4
					z=$5
					divi_err
					result=`expr $1 $2 $3 \* $5`
					shift 5
				else
					k=$4
					z=$5
					divi_err
					result=`expr $1 $2 $3 $4 $5`
					shift 5
				fi
			else printf "Invalid number: $2 or $1 Please enter only integers, can be negative"
			fi
		elif [[ $2 =~ ^[\^]$ ]]
		then
			zj=$1
			zd=$3
			pow
			result=$pods
			wyniki
			shift 3
		elif [[ $2 =~ ^[-+*/]$ ]]
		then
			if [[ $1 =~ ^[-]?[0-9]+$ ]] && [[ $3 =~ ^[-]?[0-9]+$ ]] 
			then
				if [[ $2 =~ ^[*]$ ]]
				then
					k=$2
					z=$3
					divi_err
					result=`expr $1 \* $3`
					shift 3
				else
					k=$2
					z=$3
					divi_err
					result=`expr $1 $2 $3`
					shift 3
				fi
			else printf "Invalid number: $2 Please enter only integers, they can be negative"
			fi	
		else
			wyniki
			printf "Invalid arithmetic operator. $2 or $4 Valid operators are \"+ - \* / ^\"\n"
			exit 2
		fi
	else
		if [[ $1 =~ ^[-+]$ ]] && [[ $3 =~ ^[*/]$ ]] && [[ $5 =~ ^[\\^]$ ]]
		then
			if [[ $2 =~ ^[-]?[0-9]+$ ]]
			then	
				if [[ $3 =~ ^[*]$ ]]
				then
					zj=$4
					zd=$6
					pow
					result=`expr $result $1 $2 \* $pods`
					shift 6
				else
					zj=$4
					zd=$6
					pow
					result=`expr $result $1 $2 $3 $pods`
					shift 6
				fi
			else printf "Invalid number: $2 Please enter only integers, they can be negative\n"
				exit 2
			fi
		elif [[ $1 =~ ^[-+*/]$ ]] && [[ $3 =~ ^[\\^]$ ]]
		then
			if [[ $1 =~ ^[*]$ ]]
			then
				zj=$2
				zd=$4
				pow
				result=`expr $result \* $pods`
				shift 4
			else
				zj=$2
				zd=$4
				pow
				result=`expr $result $1 $pods`
				shift 4
			fi
		elif [[ $1 =~ ^[-+]$ ]] && [[ $3 =~ ^[*/]$ ]]
		then
			if [[ $2 =~ ^[-]?[0-9]+$ ]] && [[ $4 =~ ^[-]?[0-9]+$ ]] 
			then
				if [[ $3 =~ ^[*]$ ]]
				then
					k=$3
					z=$4
					divi_err
					result=`expr $result $1 $2 \* $4`
					shift 4
				else
					k=$3
					z=$4
					divi_err
					result=`expr $result $1 $2 $3 $4`
					shift 4
				fi
			else printf "Invalid number: $2 or $4 Please enter only integers, can be negative\n"
			fi
		elif [[ $1 =~ ^[\\^]$ ]]
		then	
			zj=$result
			zd=$2
			pow
			result=$pods
			shift 2
		elif [[ $1 =~ ^[-+*/]$ ]]
		then
			if [[ $result =~ ^[-]?[0-9]+$ ]] && [[ $2 =~ ^[-]?[0-9]+$ ]] 
			then
				if [[ $1 =~ ^[*]$ ]]
				then
					k=$1
					z=$2
					divi_err
					result=`expr $result \* $2 `
					shift 2
				else
					k=$1
					z=$2
					divi_err
					result=`expr $result $1 $2 `
					shift 2
				fi
			else printf "Invalid number: $result or $2   Please enter only integers, they can be negative\n"
			fi	
		else
			printf "Invalid arithmetic operator.  |   $1  |  Valid operators are \"+ - \* / ^\" \n"			
			exit 2
		fi
	fi		
done
echo "The result of the action is :" $result